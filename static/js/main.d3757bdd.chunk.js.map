{"version":3,"sources":["data/generateBoard.ts","components/Tile.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["Resource","TileType","Tile","props","offset","isOffset","x","y","offsetX","offsetY","sides","radius","fill","tile","color","onMouseDown","event","console","log","JSON","stringify","target","text","number","toString","fontSize","resourceTile","resource","type","Math","floor","random","ceil","Forest","Wood","Hill","Brick","Pasture","Sheep","Field","Wheat","Mountain","Ore","Board","useState","dice","setDice","ocean","Ocean","generateBoard","board","style","width","height","onClick","die1","die2","row","scale","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3757bdd.chunk.js","sourcesContent":["export interface Tile {\n  type: TileType;\n  number?: number;\n  resource?: Resource;\n  color?: string;\n}\n\nexport enum Resource {\n  Wood,\n  Brick,\n  Sheep,\n  Wheat,\n  Ore,\n}\n\nexport enum TileType {\n  Forest,\n  Hill,\n  Pasture,\n  Field,\n  Mountain,\n  Ocean,\n}\n\nfunction resourceTile(): Tile {\n  const type = Math.floor(Math.random() * 5);\n  const number = Math.ceil(Math.random() * 12);\n  let resource: Resource | undefined;\n  let color: string | undefined;\n\n  switch (type) {\n    case TileType.Forest:\n      resource = Resource.Wood;\n      color = 'green';\n      break;\n    case TileType.Hill:\n      resource = Resource.Brick;\n      color = 'red';\n      break;\n    case TileType.Pasture:\n      resource = Resource.Sheep;\n      color = 'lightgreen';\n      break;\n    case TileType.Field:\n      resource = Resource.Wheat;\n      color = 'yellow';\n      break;\n    case TileType.Mountain:\n      resource = Resource.Ore;\n      color = 'gray';\n      break;\n  }\n\n  return {\n    type,\n    number,\n    resource,\n    color,\n  };\n}\n\nexport default function generateBoard(): Array<Array<Tile | null>> {\n  const ocean = { type: TileType.Ocean, color: 'blue' };\n\n  return [\n    [null, ocean, ocean, ocean, null],\n    [ocean, resourceTile(), resourceTile(), ocean],\n    [ocean, resourceTile(), resourceTile(), resourceTile(), ocean],\n    [ocean, resourceTile(), resourceTile(), ocean],\n    [null, ocean, ocean, ocean, null],\n  ];\n}\n","import { RegularPolygon, Group, Text } from 'react-konva';\nimport { Tile as TileData } from '../data/generateBoard';\n\ninterface Props {\n  x: number;\n  y: number;\n  tile: TileData | null;\n  isOffset: boolean;\n}\n\nexport default function Tile(props: Props) {\n  const offset = props.isOffset ? -15 : -10;\n\n  return (\n    <Group x={props.x} y={props.y} offsetX={offset} offsetY={-10}>\n      <RegularPolygon\n        sides={6}\n        radius={5}\n        fill={props.tile?.color}\n        onMouseDown={function (event) {\n          console.log(JSON.stringify(event.target, null, 2));\n        }}\n      />\n      <Text text={props.tile?.number?.toString()} fontSize={2} />\n    </Group>\n  );\n}\n","import { Stage, Layer } from 'react-konva';\nimport Tile from './Tile';\nimport { useState } from 'react';\nimport generateBoard, { Resource } from '../data/generateBoard';\n\nexport default function Board() {\n  const [dice, setDice] = useState<[number, number] | null>(null);\n  const [board] = useState(generateBoard());\n\n  function roll() {\n    const die1 = Math.ceil(Math.random() * 6);\n    const die2 = Math.ceil(Math.random() * 6);\n\n    setDice([die1, die2]);\n\n    const number = die1 + die2;\n\n    for (const row of board) {\n      for (const tile of row) {\n        if (tile?.number === number) {\n          console.log(number, Resource[tile.resource!]);\n        }\n      }\n    }\n  }\n\n  return (\n    <>\n      <button\n        style={{\n          width: '100px',\n          height: '100px',\n          fontSize: '24px',\n        }}\n        onClick={roll}\n      >\n        {dice && dice[0] + dice[1]}\n      </button>\n\n      <Stage width={1000} height={1000} scale={{ x: 10, y: 10 }}>\n        <Layer>\n          {board.map((row, y) =>\n            row.map((tile, x) => {\n              return (\n                <Tile\n                  tile={tile}\n                  x={x * 10}\n                  y={y * 10}\n                  key={`${x},${y}`}\n                  isOffset={y % 2 !== 0}\n                />\n              );\n            })\n          )}\n        </Layer>\n      </Stage>\n    </>\n  );\n}\n","import React from \"react\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return <Board />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}